import * as path from "https://deno.land/std/path/mod.ts";
import { tjs } from "./deps.ts";
import { Registry } from "../../registry/src/index.ts";

export async function generateEntrypoint(registry: Registry, schema: tjs.Definition) {
    let outDir = path.join(registry.path, 'dist');
    let outPath = path.join(outDir, 'entrypoint.ts');

    // Generate module configs
    let modImports = "";
    let modConfig = "{";
    for (let modName in registry.modules) {
        let mod = registry.modules[modName];

        modConfig += `${JSON.stringify(modName)}: {`;

        // Generate script configs
        modConfig += "scripts: {";
        for (let scriptName in mod.scripts) {
            let handlerIdent = `modules__${modName}__${scriptName}__handler`;

            modImports = `import { handler as ${handlerIdent} } from '../modules/${modName}/scripts/${scriptName}.ts';\n`;
            modConfig += `${JSON.stringify(scriptName)}: { handler: ${handlerIdent} },`;
        }
        modConfig += "},";

        modConfig += "}";
    }
    modConfig += "}";

    // Generate source
    let source = `
// This file is generated by @ogs/engine-builder

import { Runtime } from "../engine/runtime/src/index.ts";

${modImports}

async function main() {
    let runtime = new Runtime({
        modules: ${modConfig},
        schema: ${JSON.stringify(schema)},
    });
    await runtime.serve();
}

main();

`;

    // Write file
    console.log('Writing entrypoint', outPath);
    await Deno.writeTextFile(outPath, source);
}

