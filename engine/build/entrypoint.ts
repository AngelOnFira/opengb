import * as path from "std/path/mod.ts";
import { Registry } from "../registry/mod.ts";
import * as tjs from "typescript-json-schema";

export async function generateEntrypoint(registry: Registry) {

    // Generate module configs
    let modImports = "";
    let modConfig = "{";
    for (let mod of registry.modules.values()) {
        modConfig += `${JSON.stringify(mod.name)}: {`;

        // Generate script configs
        modConfig += "scripts: {";
        for (let script of mod.scripts.values()) {
            let handlerIdent = `modules__${mod.name}__${script.name}__handler`;

            modImports += `import { handler as ${handlerIdent} } from '../modules/${mod.name}/scripts/${script.name}.ts';\n`;
            modConfig += `${JSON.stringify(script.name)}: { handler: ${handlerIdent}, requestSchema: ${JSON.stringify(script.requestSchema)}, responseSchema: ${JSON.stringify(script.responseSchema)} },`;
        }
        modConfig += "},";

        modConfig += "},";
    }
    modConfig += "}";
    
    // Generate config.ts
    let configSource = `
// This file is generated by @ogs/engine-builder

${modImports}

export default {
    modules: ${modConfig},
};

`;

    // Generate entrypoint.ts
    let entrypointSource = `
// This file is generated by @ogs/engine-builder

import { Runtime } from "@ogs/runtime";
import config from "./config.ts";

async function main() {
    let runtime = new Runtime(config);
    await runtime.serve();
}

main();

`;

    // Write file
    const distDir = path.join(registry.path, 'dist');
    console.log('Writing entrypoint');
    await Deno.mkdir(distDir, {recursive: true});
    await Deno.writeTextFile(path.join(distDir, 'config.ts'), configSource);
    await Deno.writeTextFile(path.join(distDir, 'entrypoint.ts'), entrypointSource);
}

