import { join } from "../deps.ts";
import { Project } from "../project/mod.ts";

export async function generateEntrypoint(project: Project) {
	// Generate module configs
	let modImports = "";
	let modConfig = "{";
	for (const mod of project.modules.values()) {
		modConfig += `${JSON.stringify(mod.name)}: {`;

		// Generate script configs
		modConfig += "scripts: {";
		for (const script of mod.scripts.values()) {
			const runIdent = `modules$$${mod.name}$$${script.name}$$run`;

			modImports +=
				`import { run as ${runIdent} } from '../modules/${mod.name}/scripts/${script.name}.ts';\n`;

			modConfig += `${JSON.stringify(script.name)}: {`;
			modConfig += `run: ${runIdent},`;
			modConfig += `public: ${JSON.stringify(script.config.public ?? false)},`;
			modConfig += `requestSchema: ${JSON.stringify(script.requestSchema)},`;
			modConfig += `responseSchema: ${JSON.stringify(script.responseSchema)},`;
			modConfig += `},`;
		}
		modConfig += "},";

		// Generate error configs
		modConfig += `errors: ${JSON.stringify(mod.config.errors)},`;

		// Generate db config
		if (mod.db) {
			// HACK: https://github.com/prisma/prisma/issues/2452#issuecomment-1666513809
			const prismaImportName = `prisma$$${mod.name}`;
			modImports +=
				`import ${prismaImportName} from "./prisma/${mod.name}/esm.js";\n`;

			modConfig += `db: {`;
			modConfig += `name: ${JSON.stringify(mod.db.name)},`;
			modConfig += `createPrisma: (url: string) => {
				const pgPool = new pg.Pool({ connectionString: url })
				const adapter = new PrismaPg(pgPool);
				const prisma = new ${prismaImportName}.PrismaClient({
					adapter,
					log: ['query', 'info', 'warn', 'error'],
				});
				return { prisma, pgPool };
			},`;
			modConfig += `},`;
		} else {
			modConfig += `db: undefined,`;
		}

		modConfig += "},";
	}
	modConfig += "}";

	// Generate config.ts
	const configSource = `
// This file is generated by OGS engine

import { Config } from "@ogs/runtime";

// Create module for Prisma compatability
import { createRequire } from "node:module";
const require = createRequire(import.meta.url);

// Import Prisma adapter for Postgres
import pg from "https://deno.land/x/postgres@v0.17.2/mod.ts";
import { PrismaPg } from "npm:@prisma/adapter-pg@^5.9.1";

${modImports}

export default {
    modules: ${modConfig},
} as Config;

`;

	// Generate entrypoint.ts
	const entrypointSource = `
// This file is generated by OGS engine

import { Runtime } from "@ogs/runtime";
import config from "./runtime_config.ts";

async function main() {
    const runtime = new Runtime(config);
    await runtime.serve();
}

main();

`;

	// Write file
	const distDir = join(project.path, "dist");
	const configPath = join(distDir, "runtime_config.ts");
	const entrypointPath = join(distDir, "entrypoint.ts");
	console.log("Writing entrypoint");
	await Deno.mkdir(distDir, { recursive: true });
	await Deno.writeTextFile(configPath, configSource);
	await Deno.writeTextFile(entrypointPath, entrypointSource);

	// Format files
	const { success } = await new Deno.Command("deno", {
		args: ["fmt", configPath, entrypointPath],
	}).output();
	if (!success) throw new Error(`Failed to format generated files`);
}
